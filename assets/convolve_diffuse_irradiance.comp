#version 450
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : enable
#include "bindless.h"
#include "sh.h"
#include "hash.h"
#include "pbr.h"

layout(scalar, buffer_reference, buffer_reference_align=8) buffer IBLData
{
	SH_L2_RGB irradiance;
};

layout(scalar, push_constant) uniform uPushConstant {
	IBLData ibl_buffer;
} c_;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint  local_idx  = gl_LocalInvocationIndex;
	uvec3 global_idx = gl_GlobalInvocationID;
	uvec3 group_idx  = gl_WorkGroupID;

	if (group_idx.x == 0) {
		SH_L2_RGB radiance_sh = SH_L2_RGB_Zero();

		const int NUM_SAMPLES = 128;
		for(int isample = 0; isample < NUM_SAMPLES; ++isample) {
			// random
			uvec3 rng = pcg3d(uvec3(uvec2(isample, NUM_SAMPLES), 0));
			vec3 u3 = hash_to_float3(rng);
			float theta = 2.0 * M_PI * u3[0];
			float cos_phi = u3[1];
			float sin_phi = sqrt(1.0 - cos_phi * cos_phi);
			vec3 sample_dir = vec3(cos(theta) * sin_phi, sin(theta) * sin_phi, cos_phi);

			vec3 sample_radiance = skyTex(sample_dir);
			radiance_sh = SH_Add(radiance_sh, SH_ProjectOntoL2_RGB(sample_dir, sample_radiance));

		}
		radiance_sh = SH_Divide(radiance_sh, vec3(NUM_SAMPLES));

		c_.ibl_buffer.irradiance = SH_ConvolveWithCosineLobe(radiance_sh);
	}
}
